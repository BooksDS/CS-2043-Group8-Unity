-- CS 2043 Project
DROP TABLE IF EXISTS STUDENT_HIST;
DROP TABLE IF EXISTS STUDENT;
DROP TABLE IF EXISTS FURNITURE;
DROP TABLE IF EXISTS ROOM_KEY;
DROP VIEW IF EXISTS ROOM_PLUS;
DROP TABLE IF EXISTS ROOM;
DROP TABLE IF EXISTS RESIDENCE;
DROP TABLE IF EXISTS LOGIN;

CREATE TABLE LOGIN(
USER_NAME TEXT PRIMARY KEY,
PASS_HASH TEXT NOT NULL
);

INSERT INTO LOGIN VALUES('admin','password123');


CREATE TABLE RESIDENCE(
BLDG_NUM INTEGER PRIMARY KEY,
BLDG_NAME VARCHAR(100) NOT NULL,
BLDG_ADDR VARCHAR(100) NOT NULL,
BLDG_POSTCODE VARCHAR(7) NOT NULL
);

CREATE TABLE ROOM(
ROOM_NUM INTEGER PRIMARY KEY,
BLDG_NUM INTEGER NOT NULL,
SIZE INTEGER NOT NULL,
OCCUPANCY INTEGER NOT NULL
);

CREATE TABLE ROOM_KEY(
KEY_NUM INTEGER PRIMARY KEY,
ROOM_NUM INTEGER NOT NULL,
KEY_TYPE VARCHAR(25) NOT NULL,
FOREIGN KEY (ROOM_NUM) REFERENCES ROOM(ROOM_NUM)
);

CREATE TABLE FURNITURE(
FURN_ID INTEGER PRIMARY KEY,
ROOM_NUM INTEGER NOT NULL,
FURN_TYPE VARCHAR(50) NOT NULL, -- CHAIR, TABLE, DESK, BED, ETC.check
FURN_DESC VARCHAR(100)
);

CREATE TABLE STUDENT(
STUDENT_ID INTEGER PRIMARY KEY,
BLDG_NUM INTEGER,
ROOM_NUM INTEGER,
STUDENT_NAME VARCHAR(100) NOT NULL,
STUDENT_ELIGIBLE BOOLEAN NOT NULL,
STUDENT_ELIGREASON VARCHAR(100),
FOREIGN KEY (BLDG_NUM) REFERENCES RESIDENCE(BLDG_NUM),
FOREIGN KEY (ROOM_NUM) REFERENCES ROOM(ROOM_NUM)
);

CREATE TABLE STUDENT_HIST(
MOVE_IN_DATE DATE,
MOVE_OUT_DATE DATE,
STUDENT_ID INTEGER,
BLDG_NUM INTEGER NOT NULL,
ROOM_NUM INTEGER NOT NULL,
KEY_NUM INTEGER NOT NULL,
FOREIGN KEY (BLDG_NUM) REFERENCES RESIDENCE(BLDG_NUM),
FOREIGN KEY (ROOM_NUM) REFERENCES ROOM(ROOM_NUM),
PRIMARY KEY(MOVE_IN_DATE, MOVE_OUT_DATE, STUDENT_ID)
);



INSERT INTO RESIDENCE VALUES (1, 'John Doe Residence', '1234 Somewhere Road', 'E5J 1M5');
INSERT INTO RESIDENCE VALUES (2, 'Santa Claus Residence', '1225 North Pole Ave', 'H0H 0H0');
INSERT INTO RESIDENCE VALUES (3, 'Sir James Dunn Residence', '100 Tucker Park Road', 'E2K 5E2');

-- PLACEHOLDER ROOMS
-- (Replace with stored procedure or Java code to automatically generate rooms later
-- room num, bldg num, size, occupancy
INSERT INTO ROOM VALUES (1, 1, 16, 1);
INSERT INTO ROOM VALUES (2, 1, 16, 1);
INSERT INTO ROOM VALUES (3, 1, 20, 2);
INSERT INTO ROOM VALUES (4, 1, 20, 2);

INSERT INTO ROOM VALUES (5, 2, 15, 1);
INSERT INTO ROOM VALUES (6, 2, 15, 1);
INSERT INTO ROOM VALUES (7, 2, 18, 2);
INSERT INTO ROOM VALUES (8, 2, 18, 2);

INSERT INTO ROOM VALUES (9, 3, 20, 2);
INSERT INTO ROOM VALUES (10, 3, 20, 2);
INSERT INTO ROOM VALUES (11, 3, 20, 2);
INSERT INTO ROOM VALUES (12, 3, 20, 2);
INSERT INTO ROOM VALUES (13, 3, 25, 3);
INSERT INTO ROOM VALUES (14, 3, 25, 3);


INSERT INTO STUDENT VALUES(3371610, 1, 2, 'ANDREW OCONNOR', TRUE, 'N/A');
INSERT INTO STUDENT VALUES(8675309, 2, 3, 'JENNY TWOTONE', TRUE, 'N/A');

create view ROOM_PLUS as
	select ROOM.ROOM_NUM, ROOM.BLDG_NUM, SIZE, OCCUPANCY, COUNT(STUDENT_ID)
	from ROOM left join STUDENT on ROOM.ROOM_NUM = STUDENT.ROOM_NUM
	group by ROOM.ROOM_NUM, ROOM.BLDG_NUM, SIZE, OCCUPANCY;
    
select * from ROOM_PLUS where BLDG_NUM = 2;

select * from RESIDENCE inner join ROOM on RESIDENCE.BLDG_NUM = ROOM.BLDG_NUM where RESIDENCE.BLDG_NUM = 3;

select * from STUDENT;

-- get the number of rooms in each residence
select COUNT(ROOM_NUM)
from (RESIDENCE inner join ROOM on RESIDENCE.BLDG_NUM = ROOM.BLDG_NUM)
where(RESIDENCE.BLDG_NUM = 3);

-- get the list of students in John Doe res
select STUDENT_NAME
from (RESIDENCE inner join STUDENT on RESIDENCE.BLDG_NUM = STUDENT.BLDG_NUM)
where RESIDENCE.BLDG_NUM = 2;







